
version: '3.8'

services:
  kafka:
    image: bitnami/kafka:3.7
    hostname: kafka
    restart: unless-stopped
    ports:
      - "9092:9092"  # Expose Kafka externally for development
    environment:
      # KRaft mode configuration
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # Auto-create topics and replication settings
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CFG_NUM_PARTITIONS: 3
      # Allow external connections
      ALLOW_PLAINTEXT_LISTENER: yes
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - elastic-net
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s

  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - elastic-net

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    networks:
      - elastic-net

  es:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
    networks:
      - elastic-net

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.0
    environment:
      - ELASTICSEARCH_HOSTS=http://es:9200
    ports:
      - "5601:5601"
    depends_on:
      - es
    networks:
      - elastic-net

  data_reception_and_processing:
    build:
      context: .
      dockerfile: data_reception_and_processing/Dockerfile
    environment:
      - KAFKA_URL=kafka
      - KAFKA_PORT=9092
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - MONGO_DB_NAME=muezzin_podcasts
      - ELASTIC_HOST=http://es:9200
      - LOGGERS_NAME=my_logger
      - ELASTIC_INDEX_NAME=index_logges
    depends_on:
      - kafka
      - mongo
      - es
    networks:
      - elastic-net

  getting_first_data:
    build:
      context: .
      dockerfile: getting_first_data/Dockerfile
    environment:
      - KAFKA_URL=kafka
      - KAFKA_PORT=9092
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - ELASTIC_HOST=http://es:9200
      - LOGGERS_NAME=my_logger
      - ELASTIC_INDEX_NAME=index_logges
    depends_on:
      - kafka
      - mongo
      - es
    networks:
      - elastic-net

  transcribing_and_updating:
    build:
      context: .
      dockerfile: transcribing_and_updating/Dockerfile
    environment:
      - KAFKA_URL=kafka
      - KAFKA_PORT=9092
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - MONGO_DB_NAME=muezzin_podcasts
      - ELASTIC_HOST=http://es:9200
      - ELASTIC_INDEX=metadata
      - LOGGERS_NAME=my_logger
      - ELASTIC_INDEX_NAME=index_logges
    depends_on:
      - kafka
      - mongo
      - es
    networks:
      - elastic-net


  text_processing:
    build:
      context: .
      dockerfile: text_processing/Dockerfile
    environment:
      - KAFKA_URL=kafka
      - KAFKA_PORT=9092
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - ELASTIC_HOST=http://es:9200
      - ELASTIC_INDEX=metadata
      - LOGGERS_NAME=my_logger
      - ELASTIC_INDEX_NAME=index_logges
    depends_on:
      - kafka
      - mongo
      - es
    networks:
      - elastic-net

networks:
  elastic-net:
    driver: bridge

volumes:
  kafka_data:
  mongodb_data: